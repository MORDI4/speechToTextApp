Index: src/main/java/com/example/basics/SpeechRecognition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.basics;\r\n\r\nimport org.apache.commons.math3.complex.Complex;\r\nimport org.apache.commons.math3.transform.DftNormalization;\r\nimport org.apache.commons.math3.transform.FastFourierTransformer;\r\nimport org.apache.commons.math3.transform.TransformType;\r\nimport org.deeplearning4j.eval.Evaluation;\r\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration;\r\nimport org.deeplearning4j.nn.conf.layers.DenseLayer;\r\nimport org.deeplearning4j.nn.conf.layers.OutputLayer;\r\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork;\r\nimport org.deeplearning4j.nn.weights.WeightInit;\r\nimport org.deeplearning4j.util.ModelSerializer;\r\nimport org.nd4j.linalg.activations.Activation;\r\nimport org.nd4j.linalg.api.ndarray.INDArray;\r\nimport org.nd4j.linalg.dataset.DataSet;\r\nimport org.nd4j.linalg.dataset.SplitTestAndTrain;\r\nimport org.nd4j.linalg.factory.Nd4j;\r\nimport org.nd4j.linalg.learning.config.Adam;\r\nimport org.nd4j.linalg.lossfunctions.LossFunctions;\r\nimport org.jline.reader.LineReader;\r\nimport org.jline.reader.LineReaderBuilder;\r\nimport org.jline.terminal.Terminal;\r\nimport org.jline.terminal.TerminalBuilder;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\n\r\nimport javax.sound.sampled.*;\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class SpeechRecognition {\r\n\r\n    // Zmienne klasowe\r\n    private static final int SAMPLE_RATE = 44100;\r\n    private static final int BUFFER_SIZE = 1024;\r\n    private static final int NUM_MFCC_COEFFICIENTS = 13;\r\n    private static final int NUM_RECORDINGS = 150;\r\n    private static List<String> words = new ArrayList<>();\r\n    private static MultiLayerNetwork model;\r\n    private static final String TRAINING_DATA_FILE = \"training_data.csv\";\r\n    private static final String WORDS_LIST_FILE = \"words_list.txt\";\r\n\r\n\r\n\r\n    public static void main(String[] args) {\r\n\r\n        System.out.println(\"Starting main method...\");\r\n        try (Scanner scanner = new Scanner(System.in)) {\r\n            loadWordsFromListFile();\r\n            if (getUserConfirmation(scanner, \"Czy chcesz dodać dane treningowe?\")) {\r\n                addTrainingData(scanner);\r\n            }\r\n\r\n            if (getUserConfirmation(scanner, \"Czy chcesz utworzyć model DNN?\")) {\r\n              //  trainAndSaveModel();\r\n            }\r\n\r\n            //recognizeWordsFromAudio();\r\n        } catch (Exception e) {\r\n            System.err.println(\"An error occurred: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static boolean getUserConfirmation(Scanner scanner, String message) {\r\n        System.out.println(message + \" (t - tak, n - nie)\");\r\n        String response = scanner.nextLine();\r\n        return response.equalsIgnoreCase(\"t\");\r\n    }\r\n\r\n    private static void loadWordsFromTrainingDataFile() {\r\n        File file = new File(TRAINING_DATA_FILE);\r\n        if (!file.exists()) {\r\n            System.out.println(\"Training data file does not exist.\");\r\n            return;\r\n        }\r\n\r\n        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\r\n            String line;\r\n            while ((line = br.readLine()) != null) {\r\n                String word = line.split(\",\")[0];\r\n                if (!words.contains(word)) {\r\n                    words.add(word);\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error loading words from file: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    private static void trainAndSaveModel() {\r\n        System.out.println(\"Training model...\");\r\n        try {\r\n            model = trainModel();\r\n            if (model != null) {\r\n                System.out.println(\"Model trained successfully, evaluating and saving...\");\r\n                evaluateAndSaveModel(model, new File(\"speech_model.zip\"));\r\n            } else {\r\n                System.out.println(\"Model training failed.\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error training model: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static void loadWordsFromListFile() {\r\n        try (BufferedReader br = new BufferedReader(new FileReader(WORDS_LIST_FILE))) {\r\n            String line;\r\n            while ((line = br.readLine()) != null) {\r\n                words.add(line.trim());\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error loading words from file: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private static void addTrainingData(Scanner scanner) throws IOException, LineUnavailableException {\r\n        Set<String> uniqueWords = new HashSet<>(words);\r\n        System.out.println(\"Dostępne słowa: \" + uniqueWords);\r\n        for (String word : uniqueWords) {\r\n            List<double[]> mfccSamples = recordWordSamples(scanner, word);\r\n            for (double[] mfcc : mfccSamples) {\r\n                saveTrainingData(word, mfcc);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void saveTrainingData(String word, double[] mfccFeatures) throws IOException {\r\n        try (FileWriter fw = new FileWriter(TRAINING_DATA_FILE, true);\r\n             BufferedWriter bw = new BufferedWriter(fw);\r\n             PrintWriter out = new PrintWriter(bw)) {\r\n            out.print(word);\r\n            for (double feature : mfccFeatures) {\r\n                out.print(\",\" + feature);\r\n            }\r\n            out.println();\r\n        }\r\n    }\r\n\r\n\r\n    private static List<DataSet> loadTrainingDataFromFile() {\r\n        List<DataSet> dataSetList = new ArrayList<>();\r\n        File file = new File(TRAINING_DATA_FILE);\r\n        if (!file.exists()) {\r\n            return dataSetList;\r\n        }\r\n\r\n        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\r\n            String line;\r\n            while ((line = br.readLine()) != null) {\r\n                String[] values = line.split(\",\");\r\n                String wordLabel = values[0];\r\n                double[] mfccFeatures = Arrays.stream(values, 1, values.length).mapToDouble(Double::parseDouble).toArray();\r\n\r\n                int wordIndex = words.indexOf(wordLabel);\r\n                INDArray input = Nd4j.create(new double[][]{mfccFeatures});\r\n                INDArray label = Nd4j.zeros(1, words.size());\r\n                label.putScalar(0, wordIndex, 1);\r\n                dataSetList.add(new DataSet(input, label));\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error reading training data file.\");\r\n            e.printStackTrace();\r\n        }\r\n        return dataSetList;\r\n    }\r\n\r\n\r\n\r\n\r\n    private static List<double[]> recordWordSamples(Scanner scanner, String word) throws IOException, LineUnavailableException {\r\n        List<double[]> mfccSamples = new ArrayList<>();\r\n        System.out.println(\"Nagrywanie próbek dla słowa: \" + word);\r\n        for (int i = 0; i < NUM_RECORDINGS; i++) {\r\n            System.out.println(\"Naciśnij Enter, aby rozpocząć nagrywanie (\" + (i + 1) + \"/\" + NUM_RECORDINGS + \")\");\r\n            scanner.nextLine();\r\n            byte[] audioData = recordAudio(SAMPLE_RATE);\r\n            AudioInputStream audioInputStream = new AudioInputStream(new ByteArrayInputStream(audioData), new AudioFormat(SAMPLE_RATE, 16, 1, true, true), audioData.length / 2);\r\n            double[] mfccFeatures = processAudio(audioInputStream, NUM_MFCC_COEFFICIENTS, SAMPLE_RATE);\r\n            mfccSamples.add(mfccFeatures);\r\n        }\r\n        return mfccSamples;\r\n    }\r\n\r\n\r\n    private static MultiLayerNetwork trainModel() throws Exception {\r\n        loadWordsFromListFile();\r\n        if (words.isEmpty()) {\r\n            System.out.println(\"No words loaded. Cannot train model.\");\r\n            return null;\r\n        }\r\n\r\n        List<DataSet> trainingData = loadTrainingDataFromFile();\r\n        if (trainingData.isEmpty()) {\r\n            System.out.println(\"No training data available.\");\r\n            return null;\r\n        }\r\n\r\n        DataSet allData = DataSet.merge(trainingData);\r\n        allData.shuffle();\r\n        SplitTestAndTrain testAndTrain = allData.splitTestAndTrain(0.8);\r\n\r\n        int numInputs = NUM_MFCC_COEFFICIENTS;\r\n        int numOutputs = words.size();\r\n        int numHiddenNodes = 128;\r\n\r\n        MultiLayerNetwork model = new MultiLayerNetwork(new NeuralNetConfiguration.Builder()\r\n                .updater(new Adam())\r\n                .weightInit(WeightInit.XAVIER)\r\n                .list()\r\n                .layer(0, new DenseLayer.Builder().nIn(numInputs).nOut(numHiddenNodes).activation(Activation.RELU).build())\r\n                .layer(1, new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nIn(numHiddenNodes).nOut(numOutputs).activation(Activation.SOFTMAX).build())\r\n                .build());\r\n\r\n        model.init();\r\n        model.fit(testAndTrain.getTrain());\r\n        return model;\r\n    }\r\n\r\n\r\n    private static void evaluateAndSaveModel(MultiLayerNetwork model, File file) throws IOException {\r\n        Evaluation eval = new Evaluation(words.size());\r\n        List<DataSet> trainingData = loadTrainingDataFromFile();\r\n        DataSet allData = DataSet.merge(trainingData);\r\n        INDArray output = model.output(allData.getFeatures());\r\n        eval.eval(allData.getLabels(), output);\r\n        System.out.println(eval.stats());\r\n        ModelSerializer.writeModel(model, file, true);\r\n    }\r\n\r\n    public static void recognizeWordsFromAudio() throws Exception {\r\n        Terminal terminal = TerminalBuilder.terminal();\r\n        LineReader reader = LineReaderBuilder.builder().terminal(terminal).build();\r\n\r\n        System.out.println(\"Naciśnij Enter, aby rozpocząć nagrywanie, naciśnij Enter ponownie, aby zakończyć nagrywanie.\");\r\n\r\n        ByteArrayOutputStream currentRecording = new ByteArrayOutputStream();\r\n        AudioFormat format = new AudioFormat(SAMPLE_RATE, 16, 1, true, true);\r\n        TargetDataLine line = (TargetDataLine) AudioSystem.getLine(new DataLine.Info(TargetDataLine.class, format));\r\n        line.open(format);\r\n        line.start();\r\n\r\n        AtomicBoolean isRecording = new AtomicBoolean(false);\r\n\r\n        Thread recordingThread = new Thread(() -> {\r\n            byte[] buffer = new byte[1024];\r\n            int numBytesRead;\r\n            while (!Thread.currentThread().isInterrupted() && isRecording.get()) {\r\n                numBytesRead = line.read(buffer, 0, buffer.length);\r\n                if (numBytesRead > 0) {\r\n                    currentRecording.write(buffer, 0, numBytesRead);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Rozpocznij nagrywanie\r\n        reader.readLine();\r\n        isRecording.set(true);\r\n        recordingThread.start();\r\n        System.out.println(\"Rozpoczęto nagrywanie. Naciśnij Enter, aby zakończyć.\");\r\n\r\n        // Zakończ nagrywanie\r\n        reader.readLine();\r\n        isRecording.set(false);\r\n        recordingThread.interrupt();\r\n        recordingThread.join(); // Czekaj na zakończenie wątku nagrywającego\r\n        line.close();\r\n\r\n        byte[] audioData = currentRecording.toByteArray();\r\n        AudioInputStream audioInputStream = new AudioInputStream(new ByteArrayInputStream(audioData), format, audioData.length / 2);\r\n        List<double[]> wordFeaturesList = processAudioWithVAD(audioInputStream);\r\n\r\n        // Przetwarzanie słów\r\n        for (double[] mfccFeatures : wordFeaturesList) {\r\n            float[] mfccFeaturesFloat = new float[mfccFeatures.length];\r\n            for (int i = 0; i < mfccFeatures.length; i++) {\r\n                mfccFeaturesFloat[i] = (float) mfccFeatures[i];\r\n            }\r\n            INDArray inputFeatures = Nd4j.create(mfccFeaturesFloat).reshape(1, mfccFeaturesFloat.length);\r\n            INDArray output = model.output(inputFeatures);\r\n            int predictedIndex = Nd4j.argMax(output, 1).getInt(0);\r\n            System.out.println(\"Rozpoznane słowo: \" + words.get(predictedIndex));\r\n        }\r\n\r\n        System.out.println(\"Nagranie zakończone. Naciśnij Enter, aby zamknąć program.\");\r\n        reader.readLine(); // Czekaj na Enter, aby zamknąć program\r\n    }\r\n\r\n\r\n\r\n\r\n    private static final double SILENCE_THRESHOLD = 0.2; // Próg energii dla ciszy\r\n    private static final double MIN_SILENCE_DURATION = SAMPLE_RATE * 0.3; // Czas trwania ciszy w próbkach\r\n\r\n    private static List<double[]> processAudioWithVAD(AudioInputStream audioInputStream) throws IOException {\r\n        FastFourierTransformer fft = new FastFourierTransformer(DftNormalization.STANDARD);\r\n        List<double[]> wordsFeatures = new ArrayList<>();\r\n        byte[] buffer = new byte[BUFFER_SIZE];\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n        int bytesRead;\r\n        int wordCount = 0;\r\n\r\n        while ((bytesRead = audioInputStream.read(buffer)) != -1) {\r\n            out.write(buffer, 0, bytesRead);\r\n        }\r\n        byte[] audioData = out.toByteArray();\r\n        double[] samples = convertBytesToDoubleSamples(audioData);\r\n\r\n        List<Double> tempBuffer = new ArrayList<>();\r\n        boolean isSpeech = false;\r\n\r\n        for (double sample : samples) {\r\n            double currentEnergy = sample * sample;\r\n\r\n            // Detekcja mowy na podstawie energii sygnału\r\n            if (currentEnergy > SILENCE_THRESHOLD) {\r\n                if (!isSpeech) {\r\n                    // Jeśli mowa się rozpoczyna, dodaj segment do bufora\r\n                    tempBuffer.add(sample);\r\n                    isSpeech = true;\r\n                }\r\n            } else {\r\n                if (isSpeech) {\r\n                    // Jeśli mowa się kończy, przetwórz bufor\r\n                    double[] segment = tempBuffer.stream().mapToDouble(d -> d).toArray();\r\n                    segment = Arrays.copyOf(segment, nextPowerOfTwo(segment.length));\r\n                    Complex[] fftResult = fft.transform(segment, TransformType.FORWARD);\r\n                    double[] mfccFeatures = calculateMFCC(fftResult, SAMPLE_RATE, NUM_MFCC_COEFFICIENTS);\r\n                    wordsFeatures.add(mfccFeatures);\r\n                    tempBuffer.clear();\r\n                    wordCount++;\r\n                    isSpeech = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Obsługa ostatniego segmentu\r\n        if (!tempBuffer.isEmpty()) {\r\n            double[] segment = tempBuffer.stream().mapToDouble(d -> d).toArray();\r\n            segment = Arrays.copyOf(segment, nextPowerOfTwo(segment.length));\r\n            Complex[] fftResult = fft.transform(segment, TransformType.FORWARD);\r\n            double[] mfccFeatures = calculateMFCC(fftResult, SAMPLE_RATE, NUM_MFCC_COEFFICIENTS);\r\n            wordsFeatures.add(mfccFeatures);\r\n            wordCount++;\r\n        }\r\n\r\n        System.out.println(\"Liczba wydzielonych słów: \" + wordCount);\r\n        return wordsFeatures;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private static byte[] convertDoubleSamplesToBytes(double[] samples) {\r\n        byte[] byteData = new byte[samples.length * 2];  // każda próbka będzie miała 2 bajty (16-bitowe wartości)\r\n        for (int i = 0; i < samples.length; i++) {\r\n            int sampleAsInt = (int) (samples[i] * 32767.0);  // przeskalowanie do zakresu 16-bitowego int\r\n            byteData[i * 2] = (byte) (sampleAsInt & 0xFF);  // młodszy bajt\r\n            byteData[i * 2 + 1] = (byte) ((sampleAsInt >> 8) & 0xFF);  // starszy bajt\r\n        }\r\n        return byteData;\r\n    }\r\n\r\n\r\n    // Metoda do konwersji bajtów na próbki typu double\r\n    private static double[] convertBytesToDoubleSamples(byte[] audioBytes) {\r\n        double[] samples = new double[audioBytes.length / 2];\r\n        for (int i = 0; i < samples.length; i++) {\r\n            samples[i] = (audioBytes[2 * i] | (audioBytes[2 * i + 1] << 8)) / 32768.0;\r\n        }\r\n        return samples;\r\n    }\r\n\r\n\r\n    private static MultiLayerNetwork buildModel(int numInputs, int numOutputs, int numHiddenNodes) {\r\n        return new MultiLayerNetwork(new NeuralNetConfiguration.Builder()\r\n                .updater(new Adam())\r\n                .weightInit(WeightInit.XAVIER)\r\n                .list()\r\n                .layer(0, new DenseLayer.Builder().nIn(numInputs).nOut(numHiddenNodes)\r\n                        .activation(Activation.RELU)\r\n                        .build())\r\n                .layer(1, new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)\r\n                        .nIn(numHiddenNodes).nOut(numOutputs)\r\n                        .activation(Activation.SOFTMAX)\r\n                        .build())\r\n                .build());\r\n    }\r\n\r\n\r\n    private static byte[] recordAudio(int sampleRate) throws LineUnavailableException {\r\n        AudioFormat format = new AudioFormat(sampleRate, 16, 1, true, true);\r\n        DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);\r\n        if (!AudioSystem.isLineSupported(info)) {\r\n            throw new LineUnavailableException(\"Audio line not supported.\");\r\n        }\r\n        System.out.println(\"Rozpoczęto nagrywanie...\");\r\n        byte[] audioData = null;\r\n        try (TargetDataLine line = (TargetDataLine) AudioSystem.getLine(info)) {\r\n            line.open(format);\r\n            line.start();\r\n\r\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n            byte[] data = new byte[1024];\r\n            int numBytesRead;\r\n            boolean recording = true; // Dodajemy zmienną reprezentującą stan nagrywania\r\n\r\n            while (recording && !Thread.currentThread().isInterrupted()) {\r\n                numBytesRead = line.read(data, 0, data.length);\r\n                if (numBytesRead > 0) {\r\n                    out.write(data, 0, numBytesRead);\r\n                }\r\n                // Sprawdź, czy użytkownik nacisnął Enter, aby zakończyć nagrywanie\r\n                if (System.in.available() > 0 && System.in.read() == '\\n') {\r\n                    recording = false;\r\n                    System.out.println(\"Zakończono nagrywanie.\");\r\n                }\r\n            }\r\n            audioData = out.toByteArray();\r\n            out.close();\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error while recording audio: \" + e.getMessage());\r\n        }\r\n\r\n        double[] samples = convertBytesToDoubleSamples(audioData);\r\n        double[] normalizedFilteredSamples = filterAndNormalize(samples);\r\n        return convertDoubleSamplesToBytes(normalizedFilteredSamples);\r\n    }\r\n\r\n\r\n\r\n    private static double[] filterAndNormalize(double[] samples) {\r\n        double max = Arrays.stream(samples).max().orElse(1.0);\r\n        for (int i = 0; i < samples.length; i++) {\r\n            samples[i] = samples[i] / max; // Normalizacja\r\n            if (Math.abs(samples[i]) < 0.0001) samples[i] = 0; // Prosta filtracja\r\n        }\r\n        return samples;\r\n    }\r\n\r\n\r\n\r\n\r\n    // Metoda do przetwarzania nagranego dźwięku\r\n    private static double[] processAudio(AudioInputStream audioInputStream, int numCoefficients, int sampleRate) {\r\n        double[] mfcc = new double[0];\r\n\r\n        try {\r\n            FastFourierTransformer transformer = new FastFourierTransformer(DftNormalization.STANDARD);\r\n\r\n            byte[] buffer = new byte[4096];\r\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n            int bytesRead;\r\n            while ((bytesRead = audioInputStream.read(buffer)) != -1) {\r\n                out.write(buffer, 0, bytesRead);\r\n            }\r\n\r\n            byte[] audioData = out.toByteArray();\r\n            double[] samples = convertBytesToDoubleSamples(audioData); // Konwersja bajtów na próbki\r\n\r\n            samples = trimSilenceFromEdges(samples, 0.02);\r\n            samples = Arrays.copyOf(samples, nextPowerOfTwo(samples.length));\r\n\r\n            Complex[] fftResult = transformer.transform(samples, TransformType.FORWARD);\r\n            mfcc = calculateMFCC(fftResult, sampleRate, numCoefficients);\r\n\r\n            System.out.println(\"Nagranie: \" + Arrays.toString(mfcc));\r\n\r\n        } catch (IOException | IllegalArgumentException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n\r\n        return mfcc;\r\n    }\r\n\r\n    private static int nextPowerOfTwo(int number) {\r\n        int result = 1;\r\n        while (result < number) {\r\n            result <<= 1; // Podwaja wartość result\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    private static double[] trimSilenceFromEdges(double[] samples, double threshold) {\r\n        int startIndex = 0;\r\n        int endIndex = samples.length - 1;\r\n\r\n        for (int i = 0; i < samples.length; i++) {\r\n            if (Math.abs(samples[i]) > threshold) {\r\n                startIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (int i = samples.length - 1; i >= 0; i--) {\r\n            if (Math.abs(samples[i]) > threshold) {\r\n                endIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return Arrays.copyOfRange(samples, startIndex, endIndex + 1);\r\n    }\r\n\r\n\r\n    // Metoda do obliczania MFCC (Mel-Frequency Cepstral Coefficients)\r\n    private static double[] calculateMFCC(Complex[] fftResult, int sampleRate, int numCoefficients) {\r\n        final int NUM_MEL_FILTERS = 40; // Liczba filtrów melowskich\r\n        final int NUM_CEPSTRAL_COEFFICIENTS = numCoefficients; // Liczba współczynników cepstralnych\r\n        double[] mfcc = new double[NUM_CEPSTRAL_COEFFICIENTS];\r\n\r\n        // Obliczanie mocy spektrum\r\n        double[] powerSpectrum = new double[fftResult.length / 2];\r\n        for (int i = 0; i < fftResult.length / 2; i++) {\r\n            powerSpectrum[i] = Math.pow(fftResult[i].abs(), 2);\r\n        }\r\n\r\n        // Obliczanie filtrów melowskich\r\n        double[][] melFilters = createMelFilters(sampleRate, fftResult.length / 2, NUM_MEL_FILTERS);\r\n\r\n        // Filtracja pasmowa melowska\r\n        double[] melEnergies = new double[NUM_MEL_FILTERS];\r\n        for (int i = 0; i < NUM_MEL_FILTERS; i++) {\r\n            for (int j = 0; j < powerSpectrum.length; j++) {\r\n                melEnergies[i] += melFilters[i][j] * powerSpectrum[j];\r\n            }\r\n        }\r\n\r\n        // Obliczanie logarytmu energii\r\n        for (int i = 0; i < NUM_MEL_FILTERS; i++) {\r\n            melEnergies[i] = Math.log(melEnergies[i]);\r\n        }\r\n\r\n        // Wykonanie dyskretnej transformaty kosinusowej (DCT)\r\n        for (int i = 0; i < NUM_CEPSTRAL_COEFFICIENTS; i++) {\r\n            double sum = 0;\r\n            for (int j = 0; j < NUM_MEL_FILTERS; j++) {\r\n                sum += melEnergies[j] * Math.cos(Math.PI * i / NUM_MEL_FILTERS * (j + 0.5));\r\n            }\r\n            mfcc[i] = sum;\r\n        }\r\n\r\n        return mfcc;\r\n    }\r\n\r\n    // Metoda do tworzenia filtrów melowskich\r\n    private static double[][] createMelFilters(int sampleRate, int fftSize, int numFilters) {\r\n        final double fMin = 0; // Minimalna częstotliwość\r\n        final double fMax = sampleRate / 2; // Maksymalna częstotliwość\r\n        final double melMin = 2595 * Math.log10(1 + fMin / 700); // Minimalna częstotliwość melowska\r\n        final double melMax = 2595 * Math.log10(1 + fMax / 700); // Maksymalna częstotliwość melowska\r\n        double[] melPoints = new double[numFilters + 2];\r\n        for (int i = 0; i < melPoints.length; i++) {\r\n            melPoints[i] = melMin + (melMax - melMin) / (numFilters + 1) * i;\r\n        }\r\n        double[][] filters = new double[numFilters][fftSize];\r\n        for (int i = 1; i <= numFilters; i++) {\r\n            for (int j = 0; j < fftSize; j++) {\r\n                double f = j * sampleRate / fftSize;\r\n                if (f < fMin || f > fMax) {\r\n                    filters[i - 1][j] = 0;\r\n                } else {\r\n                    double mel = 2595 * Math.log10(1 + f / 700);\r\n                    if (mel <= melPoints[i - 1]) {\r\n                        filters[i - 1][j] = 0;\r\n                    } else if (mel < melPoints[i]) {\r\n                        filters[i - 1][j] = (mel - melPoints[i - 1]) / (melPoints[i] - melPoints[i - 1]);\r\n                    } else if (mel < melPoints[i + 1]) {\r\n                        filters[i - 1][j] = (melPoints[i + 1] - mel) / (melPoints[i + 1] - melPoints[i]);\r\n                    } else {\r\n                        filters[i - 1][j] = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return filters;\r\n    }\r\n\r\n    private static MultiLayerNetwork loadModel(File modelFile) {\r\n        MultiLayerNetwork model = null;\r\n        try {\r\n            model = MultiLayerNetwork.load(modelFile, true);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return model;\r\n    }\r\n\r\n    private static double[] oneHotEncode(int index, int size) {\r\n        if (index < 0 || index >= size) {\r\n            throw new IllegalArgumentException(\"Index out of bounds: \" + index);\r\n        }\r\n        double[] oneHotEncoded = new double[size];\r\n        oneHotEncoded[index] = 1.0;\r\n        return oneHotEncoded;\r\n    }\r\n\r\n\r\n    private static void evaluateModel(MultiLayerNetwork model, List<String> words, List<List<double[]>> mfccSamplesList) {\r\n        Evaluation eval = new Evaluation(words.size());  // Inicjalizacja obiektu oceny z liczbą klas/słów\r\n\r\n        for (int wordIndex = 0; wordIndex < words.size(); wordIndex++) {\r\n            List<double[]> mfccSamples = mfccSamplesList.get(wordIndex);\r\n\r\n            for (double[] mfcc : mfccSamples) {\r\n                INDArray input = Nd4j.create(mfcc, new int[]{1, mfcc.length});  // Tworzenie NDArray dla danych wejściowych\r\n                INDArray output = model.output(input);  // Pobranie predykcji modelu\r\n\r\n                INDArray labels = Nd4j.create(oneHotEncode(wordIndex, words.size()), new int[]{1, words.size()});  // Tworzenie NDArray dla etykiet\r\n                eval.eval(labels, output);  // Ocena predykcji\r\n            }\r\n        }\r\n\r\n        System.out.println(eval.stats());  // Wyświetlanie statystyk oceny\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/basics/SpeechRecognition.java b/src/main/java/com/example/basics/SpeechRecognition.java
--- a/src/main/java/com/example/basics/SpeechRecognition.java	(revision 1bfcdf9f1d8580dbf6018f4928cbb17e550fa51d)
+++ b/src/main/java/com/example/basics/SpeechRecognition.java	(date 1716567796211)
@@ -37,7 +37,7 @@
     private static final int NUM_RECORDINGS = 150;
     private static List<String> words = new ArrayList<>();
     private static MultiLayerNetwork model;
-    private static final String TRAINING_DATA_FILE = "training_data.csv";
+    private static final String TRAINING_DATA_FILE = "training_datans.csv";
     private static final String WORDS_LIST_FILE = "words_list.txt";
 
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2b8b1008-3418-4230-a8a2-ee0b2892e14a\" name=\"Changes\" comment=\"Dane treningowe : duży, mały, dobry,zwierzę\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/words_list.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/words_list.txt\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"usePluginRegistry\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n    <option name=\"importingSettings\">\r\n      <MavenImportingSettings>\r\n        <option name=\"jdkForImporter\" value=\"21\" />\r\n      </MavenImportingSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"MavenRunner\">\r\n    <option name=\"jreName\" value=\"21\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2dElImdSnrIiuazE0RGcgW50B6U\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Michal_Mordarski/Downloads/jahmm-0.7.0.jar&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Michal_Mordarski\\IdeaProjects\\speechToTextApp\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"SpeechRecognition\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.basics.SpeechRecognition\" />\r\n      <module name=\"speechToTextApp\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.basics.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.SpeechRecognition\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2b8b1008-3418-4230-a8a2-ee0b2892e14a\" name=\"Changes\" comment=\"\" />\r\n      <created>1709581042963</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1709581042963</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Naprawa błędów związanych z załadowanie projektu\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715174756281</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715174756281</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Dane trenigowe : hi , how\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715197766612</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715197766612</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Dane treningowe : are\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715198315829</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715198315829</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Dane treningowe : you\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715199105598</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715199105598</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Dane treningowe : animal\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715275622310</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715275622310</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Dane treningowe : apple , be\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715276478901</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715276478901</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Dane treningowe : bank , bar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715278247432</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715278247432</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Dane treningowe : yes,no\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715418193745</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715418193745</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Dane treningowe : goodbye&#10;                  thank &#10;                  please\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715439516070</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715439516070</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Dane treningowe : sorry ,I, he\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715446156435</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715446156435</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Dane treningowe : she,it,we\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715448168185</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715448168185</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Dane treningowe : they ,this, that\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715450286505</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715450286505</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Dane treningowe : here,there,what\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715453925903</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715453925903</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Dane treningowe : who,where, when\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715455601122</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715455601122</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Dane treningowe : eat,drink,sleep\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715537326257</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715537326257</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Dane treningowe : walk,run,jump\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715538260458</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715538260458</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Dane treningowe : sit,stand,read\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715539259946</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715539259946</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Dane treningowe : write ,speak ,listen\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715613224420</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715613224420</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Dane treningowe : listen,understand,love\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715620915225</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715620915225</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Dane treningowe : hate,happy,sad\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715622566717</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715622566717</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Dane treningowe : angry ,tired,hot\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715624043212</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715624043212</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"Dane treningowe : cold ,big,small\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715625114797</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715625114797</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Dane treningowe :good,bad, cześć\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715627118966</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715627118966</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Dane treningowe : nie,do widzenia ,tak\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715715240088</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715715240088</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Dane treningowe : przepraszam,dziękuję, proszę\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715716210721</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715716210721</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Dane treningowe : ja ,ty ,on\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715716975926</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715716975926</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Dane treningowe : ona,to,my\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715786959915</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715786959916</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Dane treningowe : oni , ten ,tamten\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715787752212</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715787752212</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Dane treningowe : tutaj, tam , co\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715788581487</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715788581487</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Dane treningowe : kto, gdzie, kiedy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715876596540</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715876596540</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"Dane treningowe : dlaczego ,jak , jeść\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715877623278</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715877623278</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"Dane treningowe : pić, spać ,chodzić\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715878468830</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715878468830</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"Dane treningowe : biegać, skakać ,siedzieć\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715879306920</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715879306920</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"Dane treningowe : pisać,czytać, stać,mówić\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715881585343</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715881585343</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"Dane treningowe : słuchać, rozumieć,kochać,nienawidzić\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715882907075</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715882907075</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"Dane treningowe : smutny,zły\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715960829448</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715960829449</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"Dane treningowe : zmęczony,gorący, zimny,  szczęśliwy\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715962389315</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715962389315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"Dane treningowe : duży, mały, dobry,zwierzę\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715963523994</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715963523994</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"39\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:org.projectlombok:lombok\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Dane treningowe : who,where, when\" />\r\n    <MESSAGE value=\"Dane treningowe : eat,drink,sleep\" />\r\n    <MESSAGE value=\"Dane treningowe : walk,run,jump\" />\r\n    <MESSAGE value=\"Dane treningowe : sit,stand,read\" />\r\n    <MESSAGE value=\"Dane treningowe : write ,speak ,listen\" />\r\n    <MESSAGE value=\"Dane treningowe : listen,understand,love\" />\r\n    <MESSAGE value=\"Dane treningowe : hate,happy,sad\" />\r\n    <MESSAGE value=\"Dane treningowe : angry ,tired,hot\" />\r\n    <MESSAGE value=\"Dane treningowe : cold ,big,small\" />\r\n    <MESSAGE value=\"Dane treningowe :good,bad, cześć\" />\r\n    <MESSAGE value=\"Dane treningowe : nie,do widzenia ,tak\" />\r\n    <MESSAGE value=\"Dane treningowe : przepraszam,dziękuję, proszę\" />\r\n    <MESSAGE value=\"Dane treningowe : ja ,ty ,on\" />\r\n    <MESSAGE value=\"Dane treningowe : ona,to,my\" />\r\n    <MESSAGE value=\"Dane treningowe : oni , ten ,tamten\" />\r\n    <MESSAGE value=\"Dane treningowe : tutaj, tam , co\" />\r\n    <MESSAGE value=\"Dane treningowe : kto, gdzie, kiedy\" />\r\n    <MESSAGE value=\"Dane treningowe : dlaczego ,jak , jeść\" />\r\n    <MESSAGE value=\"Dane treningowe : pić, spać ,chodzić\" />\r\n    <MESSAGE value=\"Dane treningowe : biegać, skakać ,siedzieć\" />\r\n    <MESSAGE value=\"Dane treningowe : pisać,czytać, stać,mówić\" />\r\n    <MESSAGE value=\"Dane treningowe : słuchać, rozumieć,kochać,nienawidzić\" />\r\n    <MESSAGE value=\"Dane treningowe : smutny,zły\" />\r\n    <MESSAGE value=\"Dane treningowe : zmęczony,gorący, zimny,  szczęśliwy\" />\r\n    <MESSAGE value=\"Dane treningowe : duży, mały, dobry,zwierzę\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Dane treningowe : duży, mały, dobry,zwierzę\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1bfcdf9f1d8580dbf6018f4928cbb17e550fa51d)
+++ b/.idea/workspace.xml	(date 1716567987190)
@@ -4,9 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="2b8b1008-3418-4230-a8a2-ee0b2892e14a" name="Changes" comment="Dane treningowe : duży, mały, dobry,zwierzę">
+    <list default="true" id="2b8b1008-3418-4230-a8a2-ee0b2892e14a" name="Changes" comment="Dane treningowe : jabłko,być, bar,bank">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/words_list.txt" beforeDir="false" afterPath="$PROJECT_DIR$/words_list.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/basics/SpeechRecognition.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/basics/SpeechRecognition.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -402,14 +402,21 @@
       <option name="project" value="LOCAL" />
       <updated>1715963523994</updated>
     </task>
-    <option name="localTasksCounter" value="39" />
+    <task id="LOCAL-00039" summary="Dane treningowe : jabłko,być, bar,bank">
+      <option name="closed" value="true" />
+      <created>1715964369247</created>
+      <option name="number" value="00039" />
+      <option name="presentableId" value="LOCAL-00039" />
+      <option name="project" value="LOCAL" />
+      <updated>1715964369247</updated>
+    </task>
+    <option name="localTasksCounter" value="40" />
     <servers />
   </component>
   <component name="UnknownFeatures">
     <option featureType="dependencySupport" implementationName="java:org.projectlombok:lombok" />
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="Dane treningowe : who,where, when" />
     <MESSAGE value="Dane treningowe : eat,drink,sleep" />
     <MESSAGE value="Dane treningowe : walk,run,jump" />
     <MESSAGE value="Dane treningowe : sit,stand,read" />
@@ -434,6 +441,7 @@
     <MESSAGE value="Dane treningowe : smutny,zły" />
     <MESSAGE value="Dane treningowe : zmęczony,gorący, zimny,  szczęśliwy" />
     <MESSAGE value="Dane treningowe : duży, mały, dobry,zwierzę" />
-    <option name="LAST_COMMIT_MESSAGE" value="Dane treningowe : duży, mały, dobry,zwierzę" />
+    <MESSAGE value="Dane treningowe : jabłko,być, bar,bank" />
+    <option name="LAST_COMMIT_MESSAGE" value="Dane treningowe : jabłko,być, bar,bank" />
   </component>
 </project>
\ No newline at end of file
